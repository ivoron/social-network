{"version":3,"sources":["assets/images/pictcha.jpg","assets/images/Cats.jpg","API/getApi.ts","Store/profileReducer.ts","Store/appReducer.ts","Store/redux-store.ts","Components/Content/Navbar/Navbar.tsx","Components/Content/Feed/Post.tsx","Components/Content/Feed/Feed.tsx","Components/Content/Feed/FeedContainer.tsx","Components/Content/Profile/ProfileStatus.tsx","Components/Content/Profile/ProfileData.tsx","Components/Content/Profile/Profile.tsx","Components/Content/Profile/ProfileContainer.tsx","Components/Content/Profile/ProfilePage.tsx","HOC/withLazyLoading.tsx","Components/Content/Content.tsx","Components/Header/SearchForm.tsx","Components/Header/Header.tsx","Components/Header/HeaderContainer.tsx","App.tsx","index.tsx","Store/authReducer.ts","Validators/WarningFieid.tsx","assets/Preloader/Preloader.tsx","HOC/withRedirect.tsx","Store/dialogsReducer.ts","Store/usersReducer.ts"],"names":["module","exports","axiosFetch","axios","create","baseURL","withCredentials","headers","getUsers","currentPage","pageSize","a","url","get","response","data","followUser","id","post","unfollowUser","delete","getProfile","getAuth","getStatus","setStatus","status","put","getLogin","email","password","rememberMe","captcha","getCaptcha","getLogOut","uploadPhoto","photo","formData","FormData","append","setProfileInfo","profileData","initialState","profile","userId","fullName","photos","small","large","contacts","currentID","postList","user","text","actions","type","postText","setCurrentID","getPropfileThunk","dispatch","getStatusThunk","setStatusThunk","resultCode","addPost","setProfilePhoto","setProfileData","getState","auth","Error","message","messages","stopSubmit","_error","Promise","reject","profileReducer","state","action","newPost","length","trim","appInit","appReducer","rootReducer","combineReducers","profilePage","dialogsPage","dialogsReducer","usersPage","usersReducer","authReducer","form","formReducer","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleWare","Navbar","className","to","Post","props","src","picture","alt","userName","Feed","postItems","map","key","FeedFormRedux","reduxForm","onSubmit","handleSubmit","Field","placeholder","component","name","newpost","FeedContainer","connect","ProfileStatus","useState","editMode","setEditMode","error","setError","msg","useEffect","undefined","autoFocus","onChange","e","target","value","onBlur","style","color","onClick","Contacts","contactKey","contactValue","href","ProfileData","editProfile","isMyPage","lookingForAJob","lookingForAJobDescription","Object","keys","ProfileEditor","validate","Input","marginRight","marginLeft","Profile","userPic","width","files","initialValues","then","ProfileAPI","myProfile","this","match","params","prevProps","myID","userID","React","Component","withRedirect","withRouter","ProfilePage","ProfileContainer","LazyLoading","Suspense","fallback","Preloader","Login","lazy","DialogsContainer","UsersContainer","Page404","Content","initialApp","exact","path","render","getAuthThunk","SearchForm","Header","console","log","isAuth","login","logOutThunk","HeaderAPI","HeaderContainer","App","ReactDOM","StrictMode","document","getElementById","captchaUrl","payload","loginThunk","input","meta","touched","mapAuthToProps","RedirectComponent","dialogs","sendMessage","messageBody","newMessage","users","followed","totalCount","isLoading","followFetch","isFetching","setCurrentPage","getUsersThunk","items","followTrack","filter"],"mappings":"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","file":"static/js/main.f389c1a7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pictcha.9d377b10.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Cats.b4013359.jpg\";","import axios from \"axios\";\r\nimport { ProfileType, PhotosType } from \"../Store/profileReducer\";\r\nimport { UsersType } from \"../Store/usersReducer\";\r\n\r\n//шаблон АПИ запроса\r\n\r\nconst axiosFetch = axios.create({\r\n  baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n  withCredentials: true,\r\n  headers: {\r\n    \"API-KEY\": \"3a2fa7ef-f2ac-41a7-8266-1ae5e11757c7\",\r\n  },\r\n});\r\n// получение списка пользователей\r\nexport const getUsers = async (currentPage: number, pageSize: number) => {\r\n  let url = `users?page=${currentPage}&count=${pageSize}`;\r\n  const response = await axiosFetch.get<GetUsersType>(url);\r\n  return response.data;\r\n};\r\ntype GetUsersType = {\r\n  items: Array<UsersType>;\r\n  totalCount: number;\r\n  error: null | string;\r\n};\r\n// запросы на подписку/отписку на выбранного пользователя\r\nexport const followUser = async (id: number) => {\r\n  let url = `follow/${id}`;\r\n  const response = await axiosFetch.post<FollowType>(url);\r\n  return response.data;\r\n};\r\nexport type FollowType = {\r\n  resultCode: number;\r\n  messages: Array<string>;\r\n  data: {};\r\n};\r\nexport const unfollowUser = async (id: number) => {\r\n  let url = `follow/${id}`;\r\n  const response = await axiosFetch.delete<UnfollowType>(url);\r\n  return response.data;\r\n};\r\ntype UnfollowType = {\r\n  resultCode: number;\r\n  messages: Array<string>;\r\n  data: {};\r\n};\r\n//получение профиля выбранного пользователя\r\nexport const getProfile = async (id: number) => {\r\n  let url = `profile/${id}`;\r\n  const response = await axiosFetch.get<ProfileType>(url);\r\n  return response.data;\r\n};\r\nexport const getAuth = async () => {\r\n  let url = \"auth/me\";\r\n  const response = await axiosFetch.get<GetAuthType>(url);\r\n  return response.data;\r\n};\r\nexport type GetAuthType = {\r\n  data: {\r\n    id: number;\r\n    email: string;\r\n    login: string;\r\n  };\r\n  resultCode: number;\r\n  messages: Array<string>;\r\n};\r\n// получение статуса текущего пользователя\r\nexport const getStatus = (id: number) => {\r\n  let url = `profile/status/${id}`;\r\n  return axiosFetch.get<string>(url);\r\n};\r\n// изменение своего статуса\r\nexport const setStatus = (status: string) => {\r\n  let url = \"profile/status/\";\r\n  return axiosFetch.put<SetStatysType>(url, { status });\r\n};\r\ntype SetStatysType = {\r\n  resultCode: number;\r\n  messages: Array<string>;\r\n  data: {};\r\n};\r\n// вход в систему\r\nexport const getLogin = (\r\n  email: string,\r\n  password: string,\r\n  rememberMe: boolean = false, // при необходимости\r\n  captcha: null | string = null //при необходимости\r\n) => {\r\n  let url = \"auth/login\";\r\n  return axiosFetch.post<GetLoginType>(url, {\r\n    email,\r\n    password,\r\n    rememberMe,\r\n    captcha,\r\n  });\r\n};\r\ntype GetLoginType = {\r\n  resultCode: number;\r\n  messages: Array<string>;\r\n  data: {};\r\n};\r\n//запрос капчи при неверном вводе логина или пароля\r\nexport const getCaptcha = async () => {\r\n  let url = \"security/get-captcha-url\";\r\n  const response = await axiosFetch.get<getCaptchaType>(url);\r\n  return response.data;\r\n};\r\ntype getCaptchaType = {\r\n  url: string;\r\n};\r\n// запрос на выход из системы (удаление текущей сессии)\r\nexport const getLogOut = () => {\r\n  let url = \"auth/login\";\r\n  return axiosFetch.delete<LogOutType>(url);\r\n};\r\ntype LogOutType = {\r\n  resultCode: number;\r\n  messages: Array<string>;\r\n  data: {};\r\n};\r\n// загрузка фотографии пользователя\r\nexport const uploadPhoto = async (photo: any) => {\r\n  let url = \"profile/photo\";\r\n  const formData = new FormData();\r\n  formData.append(\"image\", photo);\r\n  const response = await axiosFetch.put<UploadPhotoType>(url, formData);\r\n  return response.data;\r\n};\r\ntype UploadPhotoType = {\r\n  data: { photos: PhotosType };\r\n  resultCode: number;\r\n  messages: Array<string>;\r\n};\r\n// изменение информации профиля пользователя (имя, о себе, контакты)\r\nexport const setProfileInfo = (profileData: ProfileType) => {\r\n  let url = \"profile\";\r\n  return axiosFetch.put<SetProfileInfoType>(url, profileData);\r\n};\r\ntype SetProfileInfoType = {\r\n  resultCode: number;\r\n  messages: Array<string>;\r\n  data: {};\r\n};\r\n","import {\r\n  getProfile,\r\n  getStatus,\r\n  setStatus,\r\n  uploadPhoto,\r\n  setProfileInfo,\r\n} from \"../API/getApi\";\r\nimport { stopSubmit } from \"redux-form\";\r\nimport { InferActionTypes, BaseThunkType } from \"./redux-store\";\r\n\r\nlet initialState = {\r\n  profile: {\r\n    userId: 1,\r\n    fullName: \"Ilya Voronov\",\r\n    photos: {\r\n      small: null,\r\n      large: null,\r\n    },\r\n    contacts: {},\r\n  } as ProfileType,\r\n  status: \"\",\r\n  currentID: 10925,\r\n  postList: [\r\n    { id: 1, user: \"Reptiloid\", text: \"Почему так часто проподаешь\" },\r\n    { id: 2, user: \"Johny\", text: \"Где деньги, Лебовски?\" },\r\n  ] as Array<PostType>,\r\n};\r\nexport type ProfileType = {\r\n  userId: number | null;\r\n  lookingForAJob: boolean;\r\n  lookingForAJobDescription: string;\r\n  fullName: string;\r\n  contacts: ContactsType;\r\n  photos: PhotosType;\r\n};\r\nexport type PhotosType = {\r\n  small: string | null;\r\n  large: string | null;\r\n};\r\nexport type ContactsType = {\r\n  github: string | null;\r\n  vk: string | null;\r\n  facebook: string | null;\r\n  instagram: string | null;\r\n  twitter: string | null;\r\n  website: string | null;\r\n  youtube: string | null;\r\n  mainLinnk: string | null;\r\n};\r\nexport type PostType = {\r\n  id: number;\r\n  user: string;\r\n  text: string;\r\n};\r\nexport type InitStateType = typeof initialState;\r\nconst profileReducer = (\r\n  state = initialState,\r\n  action: ActionTypes\r\n): InitStateType => {\r\n  switch (action.type) {\r\n    case \"SET_PROFILE\":\r\n      return {\r\n        ...state,\r\n        profile: action.profile,\r\n      };\r\n    case \"SET_CURRENT_ID\":\r\n      return {\r\n        ...state,\r\n        currentID: action.id,\r\n      };\r\n    case \"ADD_POST\":\r\n      let newPost: PostType = {\r\n        id: state.postList.length + 1,\r\n        user: state.profile.fullName,\r\n        text: action.postText,\r\n      };\r\n      if (newPost.text && newPost.text.trim()) {\r\n        return { ...state, postList: [newPost, ...state.postList] };\r\n      }\r\n      return state;\r\n    case \"GET_STATUS\":\r\n      return { ...state, status: action.status };\r\n    case \"SET_STATUS\":\r\n      return { ...state, status: action.status };\r\n    case \"ADD_USER_PHOTO\":\r\n      return { ...state, profile: { ...state.profile, photos: action.photos } };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\ntype ActionTypes = InferActionTypes<typeof actions>;\r\n\r\nexport const actions = {\r\n  setProfile: (profile: ProfileType) =>\r\n    ({ type: \"SET_PROFILE\", profile } as const),\r\n  setCurrentID: (id: number) => ({ type: \"SET_CURRENT_ID\", id } as const),\r\n  addPostAC: (postText: string) => ({ type: \"ADD_POST\", postText } as const),\r\n  addPhoto: (photos: PhotosType) =>\r\n    ({ type: \"ADD_USER_PHOTO\", photos } as const),\r\n  getStatusAC: (status: string) => ({ type: \"GET_STATUS\", status } as const),\r\n  setStatusAC: (status: string) => ({ type: \"SET_STATUS\", status } as const),\r\n};\r\n\r\nexport type ThunkType = BaseThunkType<\r\n  ActionTypes | ReturnType<typeof stopSubmit>\r\n>;\r\nexport const setCurrentID = actions.setCurrentID;\r\nexport const getPropfileThunk = (id: number): ThunkType => async (dispatch) => {\r\n  let data = await getProfile(id);\r\n  dispatch(actions.setProfile(data));\r\n  dispatch(actions.setCurrentID(id));\r\n};\r\nexport const getStatusThunk = (id: number): ThunkType => async (dispatch) => {\r\n  let response = await getStatus(id);\r\n  dispatch(actions.setStatusAC(response.data));\r\n};\r\nexport const setStatusThunk = (status: string): ThunkType => async (\r\n  dispatch\r\n) => {\r\n  let response = await setStatus(status);\r\n  if (response.data.resultCode === 0) {\r\n    dispatch(actions.setStatusAC(status));\r\n  }\r\n};\r\nexport const addPost = (postText: string): ThunkType => async (dispatch) => {\r\n  dispatch(actions.addPostAC(postText));\r\n};\r\nexport const setProfilePhoto = (photo: File): ThunkType => async (dispatch) => {\r\n  let response = await uploadPhoto(photo);\r\n  if (response.resultCode === 0) {\r\n    dispatch(actions.addPhoto(response.data.photos));\r\n  }\r\n};\r\nexport const setProfileData = (profileData: ProfileType): ThunkType => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  let id = getState().auth.id;\r\n  let response = await setProfileInfo(profileData);\r\n  if (response.data.resultCode === 0) {\r\n    if (id != null) {\r\n      dispatch(getPropfileThunk(id));\r\n    } else {\r\n      throw new Error(\"user id is null\");\r\n    }\r\n  } else {\r\n    let message = response.data.messages[0];\r\n    dispatch(stopSubmit(\"profile-editor\", { _error: message }));\r\n    return Promise.reject(message);\r\n  }\r\n};\r\n\r\nexport default profileReducer;\r\n","import { getAuthThunk } from \"./authReducer\";\r\nimport { InferActionTypes, BaseThunkType } from \"./redux-store\";\r\n\r\nexport type InitStateType = {\r\n  appInit: boolean;\r\n};\r\n\r\nlet initialState: InitStateType = {\r\n  appInit: false,\r\n};\r\nconst appReducer = (\r\n  state = initialState,\r\n  action: ActionTypes\r\n): InitStateType => {\r\n  switch (action.type) {\r\n    case \"SET_INITIAL\":\r\n      return { ...state, appInit: true };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\ntype ActionTypes = InferActionTypes<typeof actions>;\r\n\r\nexport const actions = {\r\n  setInitialApp: () =>\r\n    ({\r\n      type: \"SET_INITIAL\",\r\n    } as const),\r\n};\r\n\r\ntype ThunkType = BaseThunkType<ActionTypes>;\r\n\r\nexport const initialApp = (): ThunkType => async (dispatch) => {\r\n  dispatch(getAuthThunk()).then(() => {\r\n    dispatch(actions.setInitialApp());\r\n  });\r\n};\r\nexport default appReducer;\r\n","import profileReducer from \"./profileReducer\";\r\nimport dialogsReducer from \"./dialogsReducer\";\r\nimport usersReducer from \"./usersReducer\";\r\nimport authReducer from \"./authReducer\";\r\nimport thunkMiddleWare, { ThunkAction } from \"redux-thunk\";\r\nimport { reducer as formReducer } from \"redux-form\";\r\nimport appReducer from \"./appReducer\";\r\nimport {\r\n  createStore,\r\n  combineReducers,\r\n  applyMiddleware,\r\n  compose,\r\n  Action,\r\n} from \"redux\";\r\n\r\nlet rootReducer = combineReducers({\r\n  profilePage: profileReducer,\r\n  dialogsPage: dialogsReducer,\r\n  usersPage: usersReducer,\r\n  auth: authReducer,\r\n  form: formReducer,\r\n  app: appReducer,\r\n});\r\n\r\ntype RootReducersType = typeof rootReducer;\r\nexport type AppStateType = ReturnType<RootReducersType>;\r\n\r\nexport type InferActionTypes<T> = T extends {\r\n  [key: string]: (...args: any[]) => infer U;\r\n}\r\n  ? U\r\n  : never;\r\n\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<\r\n  R,\r\n  AppStateType,\r\n  unknown,\r\n  A\r\n>;\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeEnhancers(applyMiddleware(thunkMiddleWare))\r\n);\r\nexport default store;\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport \"./navbar.css\"\r\nconst Navbar = () => {\r\n  return (\r\n    <div className=\"navbar\">\r\n      <div>\r\n        <NavLink to=\"/profile/\">Profile</NavLink>\r\n      </div>\r\n      <div>\r\n        <NavLink to=\"/dialogs/\">Messages</NavLink>\r\n      </div>\r\n      <div>\r\n        <NavLink to=\"/users/\">Users</NavLink>\r\n      </div>\r\n      <div>\r\n        <NavLink to=\"/feed/\">Feed</NavLink>\r\n      </div>\r\n      <div>\r\n        <NavLink to=\"/music/\">Music</NavLink>\r\n      </div>\r\n      <div>\r\n        <NavLink to=\"/settings/\">Settings</NavLink>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport picture from \"../../../assets/images/pictcha.jpg\";\r\n\r\ntype PropsType = {\r\n  userName: string\r\n  postText: string\r\n}\r\nexport default function Post(props: PropsType) {\r\n  return (\r\n    <div className=\"postBody\">\r\n      <div className=\"postInfo\">\r\n        <img src={picture} alt=\"userpic\" className=\"postPhoto\" />\r\n        <b>{props.userName}</b>\r\n      </div>\r\n      <span> {props.postText} </span>\r\n      <br />\r\n      <div className=\"postButtons\">\r\n        <button> ответить </button>\r\n        <button> удалить </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Post from \"./Post\";\r\nimport { Field, reduxForm, InjectedFormProps } from \"redux-form\";\r\nimport { PostType } from \"../../../Store/profileReducer\";\r\n\r\ntype PropsType = {\r\n  postList: Array<PostType>;\r\n  addPost: (postText: string) => void;\r\n};\r\ntype FormDataType = {\r\n  newpost: string;\r\n};\r\nconst Feed: React.FC<PropsType> = ({ postList, addPost }) => {\r\n  // список постов из стора\r\n  let postItems = postList.map((post) => (\r\n    <Post key={post.id} userName={post.user} postText={post.text} />\r\n  ));\r\n  // форма добавления поста\r\n\r\n  const FeedForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n      <form onSubmit={props.handleSubmit}>\r\n        <Field\r\n          placeholder=\"What's new?\"\r\n          className=\"addPost\"\r\n          component={\"textarea\"}\r\n          name=\"newpost\"\r\n        />\r\n        <br />\r\n        <label>\r\n          {\" \"}\r\n          <Field component={\"input\"} type=\"checkbox\" name=\"share\" /> Share with\r\n          comrades\r\n        </label>\r\n        <button> Add </button>\r\n      </form>\r\n    );\r\n  };\r\n\r\n  const FeedFormRedux = reduxForm<FormDataType>({\r\n    form: \"add-new-post\",\r\n  })(FeedForm);\r\n\r\n  const addNewPost = ({ newpost }: FormDataType) => {\r\n    addPost(newpost);\r\n  };\r\n\r\n  return (\r\n    <div className=\"feedBody\">\r\n      <FeedFormRedux onSubmit={addNewPost} />\r\n      <h3> My whole life </h3>\r\n      {postItems}\r\n    </div>\r\n  );\r\n};\r\nexport default Feed;\r\n","import Feed from \"./Feed\";\r\nimport { addPost } from \"../../../Store/profileReducer\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./feed.css\"\r\nimport { AppStateType } from \"../../../Store/redux-store\";\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n  return {\r\n    postList: state.profilePage.postList,\r\n  };\r\n};\r\n\r\nconst FeedContainer = connect(mapStateToProps, {addPost})(Feed);\r\nexport default FeedContainer;\r\n","import { useState, useEffect, ChangeEvent } from \"react\";\r\nimport React from \"react\";\r\n\r\ntype PropsType = {\r\n  status: string;\r\n  setStatus: (status: string) => void;\r\n};\r\nconst ProfileStatus: React.FC<PropsType> = (props) => {\r\n  let [editMode, setEditMode] = useState(false);\r\n  let [status, setStatus] = useState(props.status);\r\n  let [error, setError] = useState(false);\r\n  let msg = `Maximum length is 300 symbols, now ${\r\n    status ? status.length : null\r\n  }`;\r\n  useEffect(() => {\r\n    setStatus(props.status);\r\n  }, [props.status]);\r\n  const editStatus = () => {\r\n    setEditMode(true);\r\n  };\r\n  const seveStatus = () => {\r\n    setEditMode(false);\r\n    props.setStatus(status);\r\n  };\r\n  const changeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setStatus(e.target.value);\r\n    if (status.length > 298) {\r\n      setError(true);\r\n    } else {\r\n      setError(false);\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      {editMode ? (\r\n        <>\r\n          <input\r\n            id={error ? \"warning\" : undefined}\r\n            autoFocus={true}\r\n            onChange={changeStatus}\r\n            onBlur={seveStatus}\r\n            value={status}\r\n          />\r\n          <br />\r\n          <span style={{ color: \"red\" }}>{error && msg}</span>\r\n        </>\r\n      ) : (\r\n        <span\r\n          className={!status ? \"editStatus\" : \"trueStatus\"}\r\n          onClick={editStatus}\r\n        >\r\n          {props.status || \"change status...\"}\r\n        </span>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default ProfileStatus;\r\n","import React from \"react\";\r\nimport { Field, reduxForm, InjectedFormProps } from \"redux-form\";\r\nimport { Input } from \"../../../Validators/WarningFieid\";\r\nimport { ProfileType, ContactsType } from \"../../../Store/profileReducer\";\r\n\r\ntype ContactsPropsType = {\r\n  contactKey: string | null;\r\n  contactValue: string | null;\r\n};\r\n\r\nconst Contacts: React.FC<ContactsPropsType> = ({\r\n  contactKey,\r\n  contactValue,\r\n}) => {\r\n  // отображение списка контактов\r\n  return (\r\n    <div>\r\n      {contactValue && (\r\n        <a href={contactValue} target={\"blanc\"}>\r\n          {contactKey}\r\n        </a>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\ntype ProfilePropsType = {\r\n  profile: ProfileType;\r\n  contacts: ContactsType;\r\n  editProfile: () => void;\r\n  isMyPage: boolean;\r\n};\r\nexport const ProfileData: React.FC<ProfilePropsType> = ({\r\n  profile,\r\n  contacts,\r\n  editProfile,\r\n  isMyPage,\r\n}) => {\r\n  //данные профиля в режиме просмотра\r\n  return (\r\n    <>\r\n      <hr />\r\n      <span>{profile.lookingForAJob && \"В поиске работы.\"}</span>\r\n      <br />\r\n      <span>Скиллы: {profile.lookingForAJobDescription}</span>\r\n      <div>\r\n        {Object.keys(contacts).map((key) => (\r\n          <Contacts\r\n            key={key}\r\n            contactKey={contacts[key as keyof ContactsType]}\r\n            contactValue={contacts[key as keyof ContactsType]}\r\n          />\r\n        ))}\r\n      </div>\r\n      {isMyPage && <button onClick={editProfile}>edit</button>}\r\n    </>\r\n  );\r\n};\r\n\r\ntype DataFormPropsType = {\r\n  profile: ProfileType;\r\n};\r\nconst DataFormEditor: React.FC<\r\n  InjectedFormProps<ProfileType, DataFormPropsType> & DataFormPropsType\r\n> = ({ profile, handleSubmit, error }) => {\r\n  // данные профиля в режиме редактирования\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <span>Name:</span>\r\n      <Field\r\n        validate={[]}\r\n        name={\"fullName\"}\r\n        component={Input}\r\n        placeholder={\"full name\"}\r\n      />\r\n      <span>About me:</span>\r\n      <Field\r\n        validate={[]}\r\n        name={\"aboutMe\"}\r\n        component={\"textarea\"} //вместо инпута\r\n        placeholder={\"about me\"}\r\n      />\r\n      <label style={{ marginRight: 23 }}>\r\n        <Field name={\"lookingForAJob\"} component={\"input\"} type=\"checkbox\" />В\r\n        поиске работы\r\n      </label>\r\n      <br />\r\n      <span>Professional skills:</span>\r\n      <Field\r\n        validate={[]}\r\n        name={\"lookingForAJobDescription\"}\r\n        component={\"textarea\"} //вместо инпута\r\n        placeholder={\"your professional skills\"}\r\n      />\r\n      <span>contacts:</span>\r\n      {Object.keys(profile.contacts).map((key) => (\r\n        <Field\r\n          key={key}\r\n          name={`contacts.${key}`}\r\n          component={Input}\r\n          placeholder={key + \" profile\"}\r\n        />\r\n      ))}\r\n      <hr />\r\n      <div style={{ color: \"red\", marginLeft: 5 }}>{error}</div>\r\n      <button>save changes</button>\r\n    </form>\r\n  );\r\n};\r\nexport const ProfileEditor = reduxForm<ProfileType, DataFormPropsType>({\r\n  form: \"profile-editor\",\r\n})(DataFormEditor);\r\n","import React, { useState, ChangeEvent } from \"react\";\r\nimport userPic from \"../../../assets/images/Cats.jpg\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport { ProfileEditor, ProfileData } from \"./ProfileData\";\r\nimport { ProfileType } from \"../../../Store/profileReducer\";\r\n\r\ntype PropsType = {\r\n  profile: ProfileType;\r\n  setProfilePhoto: (photo: File) => void;\r\n  isMyPage: boolean;\r\n  status: string;\r\n  setProfileData: (formData: ProfileType) => Promise<{}>;\r\n  setStatus: (status: string) => void;\r\n};\r\n\r\nconst Profile: React.FC<PropsType> = (props) => {\r\n  let { profile } = props;\r\n  let { contacts } = profile;\r\n  const [editMode, setEditMode] = useState(false);\r\n  // загрузка фото профиля на сервер\r\n  const uploadPhoto = (e: ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files?.length) {\r\n      props.setProfilePhoto(e.target.files[0]);\r\n    }\r\n  };\r\n  // редактирование данных пользователя\r\n  const editProfile = () => {\r\n    setEditMode(true);\r\n  };\r\n  const onSubmit = (formData: ProfileType) => {\r\n    props.setProfileData(formData).then(() => {\r\n      setEditMode(false);\r\n    });\r\n  };\r\n  return (\r\n    <div className=\"pageCover\">\r\n      <div className=\"profileInfo\">\r\n        <div className=\"pagePhoto\">\r\n          <img\r\n            src={profile.photos.large ? profile.photos.large : userPic}\r\n            alt=\"pic\"\r\n            width=\"100%\"\r\n          />\r\n          {props.isMyPage && <input type={\"file\"} onChange={uploadPhoto} />}\r\n        </div>\r\n        <div className=\"info\">\r\n          <h3>{profile.fullName}</h3>\r\n          {props.isMyPage ? (\r\n            <ProfileStatus status={props.status} setStatus={props.setStatus} />\r\n          ) : (\r\n            <span>{props.status ? props.status : \"no status\"}</span>\r\n          )}\r\n          {editMode ? (\r\n            <ProfileEditor\r\n              initialValues={profile}\r\n              profile={profile}\r\n              onSubmit={onSubmit}\r\n            />\r\n          ) : (\r\n            <ProfileData\r\n              profile={profile}\r\n              contacts={contacts}\r\n              editProfile={editProfile}\r\n              isMyPage={props.isMyPage}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  getPropfileThunk,\r\n  setStatusThunk,\r\n  getStatusThunk,\r\n  setProfilePhoto,\r\n  setProfileData,\r\n  ProfileType,\r\n} from \"../../../Store/profileReducer\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport withRedirect from \"../../../HOC/withRedirect\";\r\nimport \"./profile-page.css\";\r\nimport { compose } from \"redux\";\r\nimport { AppStateType } from \"../../../Store/redux-store\";\r\n\r\ntype MapDispatchPropsType = {\r\n  match: {\r\n    params: {\r\n      id: number;\r\n    };\r\n  };\r\n  getPropfileThunk: (id: number) => void;\r\n  getStatusThunk: (id: number) => void;\r\n  setStatusThunk: (status: string) => void;\r\n  setProfilePhoto: (photo: File) => void;\r\n  setProfileData: (profileData: ProfileType) => Promise<{}>;\r\n};\r\ntype MapStatePropsType = {\r\n  profile: ProfileType;\r\n  myID: number;\r\n  userID: number;\r\n  status: string;\r\n  myProfile: number;\r\n};\r\nclass ProfileAPI extends React.Component<\r\n  MapStatePropsType & MapDispatchPropsType\r\n> {\r\n  componentDidMount() {\r\n    let myProfile = this.props.myProfile; //мой айди\r\n    let user = this.props.match.params.id; //айди юзера через роутер\r\n    const { getPropfileThunk, getStatusThunk } = this.props;\r\n    getPropfileThunk(user ? user : myProfile);\r\n    getStatusThunk(user ? user : myProfile);\r\n  }\r\n  componentDidUpdate(prevProps: MapDispatchPropsType) {\r\n    if (prevProps.match.params.id !== this.props.match.params.id) {\r\n      let myID = this.props.myProfile;\r\n      const { getPropfileThunk, getStatusThunk } = this.props;\r\n      getPropfileThunk(myID);\r\n      getStatusThunk(myID);\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <Profile\r\n        profile={this.props.profile}\r\n        status={this.props.status}\r\n        setStatus={this.props.setStatusThunk}\r\n        isMyPage={this.props.myID === this.props.userID}\r\n        setProfilePhoto={this.props.setProfilePhoto}\r\n        setProfileData={this.props.setProfileData}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n  profile: state.profilePage.profile,\r\n  myID: state.auth.id,\r\n  userID: state.profilePage.currentID,\r\n  status: state.profilePage.status,\r\n  myProfile: state.auth.id,\r\n});\r\nexport default compose<React.ComponentType>(\r\n  connect(mapStateToProps, {\r\n    getPropfileThunk,\r\n    getStatusThunk,\r\n    setStatusThunk,\r\n    setProfilePhoto,\r\n    setProfileData,\r\n  }),\r\n  withRedirect,\r\n  withRouter\r\n)(ProfileAPI);\r\n","import React from \"react\";\r\nimport FeedContainer from \"../Feed/FeedContainer\";\r\nimport ProfileContainer from \"./ProfileContainer\";\r\n\r\nexport default function ProfilePage() {\r\n  return (\r\n    <div>\r\n      <ProfileContainer/>\r\n      <FeedContainer/>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Preloader from \"../assets/Preloader/Preloader\";\r\nconst LazyLoading = (Component: React.ComponentType) => {\r\n  return (\r\n    <React.Suspense fallback={<Preloader/>}>\r\n      <Component />\r\n    </React.Suspense>\r\n  );\r\n};\r\nexport default LazyLoading;\r\n\r\n// return (props) => {\r\n//   return (\r\n//     <React.Suspense fallback={Preloader}>\r\n//       <Component />\r\n//     </React.Suspense>\r\n//   )\r\n// }\r\n","import React from \"react\";\r\nimport Navbar from \"./Navbar/Navbar\";\r\nimport Preloader from \"../../assets/Preloader/Preloader\";\r\nimport ProfilePage from \"./Profile/ProfilePage\";\r\nimport { Route, withRouter, Redirect, Switch } from \"react-router-dom\";\r\nimport { initialApp } from \"../../Store/appReducer\";\r\nimport { compose } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport LazyLoading from \"../../HOC/withLazyLoading\";\r\nimport { AppStateType } from \"../../Store/redux-store\";\r\n\r\nconst Login = React.lazy(() => import(\"./Login/Login\"));\r\nconst DialogsContainer = React.lazy(() => import(\"./Dialogs/DialogsContainer\"));\r\nconst UsersContainer = React.lazy(() => import(\"./Users/UsersContainer\"));\r\nconst Page404 = React.lazy(() => import(\"./Page404\"));\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>;\r\ntype DispatchPropsType = {\r\n  initialApp: () => void;\r\n};\r\nclass Content extends React.Component<MapPropsType & DispatchPropsType> {\r\n  componentDidMount() {\r\n    this.props.initialApp();\r\n  }\r\n  render() {\r\n    // инициализация приложения = загрузка данных из API\r\n    if (!this.props.appInit) {\r\n      return <Preloader />;\r\n    }\r\n    return (\r\n      <div className=\"container\">\r\n        <Navbar />\r\n        <div className=\"body\">\r\n          <Switch>\r\n            <Route exact path=\"/\" render={() => <Redirect to={\"/profile\"} />} />\r\n            <Route path=\"/profile/:id?\" render={() => <ProfilePage />} />\r\n            <Route\r\n              path=\"/dialogs\"\r\n              render={() => LazyLoading(DialogsContainer)}\r\n            />\r\n            <Route path=\"/users\" render={() => LazyLoading(UsersContainer)} />\r\n            <Route path=\"/login\" render={() => LazyLoading(Login)} />\r\n            <Route path=\"*\" render={() => LazyLoading(Page404)} />\r\n          </Switch>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n  appInit: state.app.appInit,\r\n});\r\nexport default compose<React.ComponentType>(\r\n  withRouter,\r\n  connect(mapStateToProps, { initialApp })\r\n)(Content);\r\n","import React from \"react\";\r\nimport { Field, reduxForm, InjectedFormProps } from \"redux-form\";\r\nimport { Input } from \"../../Validators/WarningFieid\";\r\n\r\nconst Search:React.FC<InjectedFormProps<FormDataType>> = ({ handleSubmit }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <Field name={\"search\"} component={Input} placeholder={\"Поиск\"} />\r\n      <button> найти </button>\r\n    </form>\r\n  );\r\n}\r\nconst SearchForm = reduxForm<FormDataType>({ form: \"search-form\" })(Search);\r\n\r\ntype FormDataType = {\r\n  search: string\r\n}\r\nexport default SearchForm;\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport SearchForm from \"./SearchForm\";\r\nimport { InjectedFormProps } from \"redux-form\";\r\n\r\nexport type MapPropsType = {\r\n  isAuth: boolean;\r\n  login: string | null;\r\n};\r\nexport type DispatchPropsType = {\r\n  logOutThunk: () => void;\r\n};\r\nexport type FormDataType = {\r\n  search: string;\r\n};\r\nconst Header: React.FC<\r\n  InjectedFormProps<FormDataType> & MapPropsType & DispatchPropsType\r\n> = (props) => {\r\n  const onSubmit = (formData: FormDataType) => {\r\n    console.log(formData); // поиск по сайту на доработке\r\n  };\r\n  return (\r\n    <div className=\"App-header\">\r\n      <header>\r\n        <span> LOGO </span>\r\n        <SearchForm onSubmit={onSubmit} />\r\n        <div className=\"loginItem\">\r\n          {props.isAuth ? (\r\n            <>\r\n              <NavLink to=\"/profile/\">{props.login} </NavLink>|\r\n              <NavLink onClick={() => props.logOutThunk()} to=\"#\">\r\n                {\" \"}\r\n                exit\r\n              </NavLink>\r\n            </>\r\n          ) : (\r\n            <NavLink to=\"/login/\">Login</NavLink>\r\n          )}\r\n        </div>\r\n      </header>\r\n    </div>\r\n  );\r\n};\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { logOutThunk } from \"../../Store/authReducer\";\r\nimport Header, {\r\n  MapPropsType,\r\n  DispatchPropsType,\r\n  FormDataType,\r\n} from \"./Header\";\r\nimport \"./header.css\";\r\nimport { AppStateType } from \"../../Store/redux-store\";\r\nimport { InjectedFormProps } from \"redux-form\";\r\n\r\nclass HeaderAPI extends React.Component<\r\n  InjectedFormProps<FormDataType> & MapPropsType & DispatchPropsType\r\n> {\r\n  render() {\r\n    return <Header {...this.props} />;\r\n  }\r\n}\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n  login: state.auth.login,\r\n  isAuth: state.auth.isAuth,\r\n});\r\n\r\nconst HeaderContainer:any = connect(mapStateToProps, { logOutThunk })(HeaderAPI);\r\nexport default HeaderContainer;\r\n","import React from \"react\";\r\nimport Content from \"./Components/Content/Content\";\r\nimport { BrowserRouter } from \"react-router-dom\"\r\nimport HeaderContainer from \"./Components/Header/HeaderContainer\";\r\n\r\nexport default function App() {\r\n  return (\r\n      <BrowserRouter>\r\n        <HeaderContainer />\r\n        <Content />\r\n      </BrowserRouter>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./App.css\";\r\nimport store from \"./Store/redux-store\";\r\nimport App from \"./App\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <div className=\"wrapper\">\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </div>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n","import { getAuth, getLogin, getLogOut, getCaptcha } from \"../API/getApi\";\r\nimport { stopSubmit } from \"redux-form\";\r\nimport { InferActionTypes, BaseThunkType } from \"./redux-store\";\r\n\r\ntype InitStateType = {\r\n  id: null | number;\r\n  login: null | string;\r\n  email: null | string;\r\n  isAuth: boolean;\r\n  captchaUrl: null | string;\r\n};\r\nlet initialState: InitStateType = {\r\n  id: null,\r\n  login: null,\r\n  email: null,\r\n  isAuth: false,\r\n  captchaUrl: null,\r\n};\r\n\r\nconst authReducer = (\r\n  state = initialState,\r\n  action: ActionTypes\r\n): InitStateType => {\r\n  switch (action.type) {\r\n    case \"SET_AUTH_DATA\":\r\n      return { ...state, ...action.payload, isAuth: action.isAuth };\r\n    case \"SET_CAPTCHA_URL\":\r\n      return { ...state, captchaUrl: action.captchaUrl };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\ntype ActionTypes = InferActionTypes<typeof actions>;\r\n\r\nexport const actions = {\r\n  setAuthData: (\r\n    id: number | null,\r\n    email: string | null,\r\n    login: string | null,\r\n    isAuth: boolean\r\n  ) =>\r\n    ({\r\n      type: \"SET_AUTH_DATA\",\r\n      payload: { id, email, login },\r\n      isAuth,\r\n    } as const),\r\n  setCaptchaUrl: (captchaUrl: string) =>\r\n    ({\r\n      type: \"SET_CAPTCHA_URL\",\r\n      captchaUrl,\r\n    } as const),\r\n};\r\n\r\ntype ThunkType = BaseThunkType<ActionTypes | ReturnType< typeof stopSubmit>>\r\n\r\nexport const getAuthThunk = (): ThunkType => async (dispatch) => {\r\n  let data = await getAuth();\r\n  if (data.resultCode === 0) {\r\n    let { id, login, email } = data.data;\r\n    dispatch(actions.setAuthData(id, email, login, true));\r\n  }\r\n};\r\nexport const loginThunk = (\r\n  email: string,\r\n  password: string,\r\n  rememberMe: boolean,\r\n  captcha: string\r\n): ThunkType => async (dispatch) => {\r\n  let response = await getLogin(email, password, rememberMe, captcha);\r\n  if (response.data.resultCode === 0) {\r\n    dispatch(getAuthThunk());\r\n  } else {\r\n    if (response.data.resultCode === 10) {\r\n      let response = await getCaptcha();\r\n      dispatch(actions.setCaptchaUrl(response.url));\r\n    }\r\n    let message = response.data.messages[0];\r\n    dispatch(stopSubmit(\"login-form\", { _error: message }));\r\n  }\r\n};\r\nexport const logOutThunk = (): ThunkType => async (dispatch) => {\r\n  let response = await getLogOut();\r\n  if (response.data.resultCode === 0) {\r\n    let id = null,\r\n      login = null,\r\n      email = null;\r\n    dispatch(actions.setAuthData(id, email, login, false));\r\n  }\r\n};\r\n\r\nexport default authReducer;\r\n","import React from \"react\";\r\nimport { WrappedFieldMetaProps, WrappedFieldInputProps } from \"redux-form\";\r\n\r\nexport const Input = ({ input, meta, placeholder, type }: FormFieldType) => {\r\n  return (\r\n    <div className=\"warningField\">\r\n      <input\r\n        {...input}\r\n        placeholder={placeholder}\r\n        type={type}\r\n        id={meta.touched && meta.error ? \"warning\" : undefined}\r\n      />\r\n      <span>{meta.touched && meta.error}</span>\r\n    </div>\r\n  );\r\n};\r\ntype FormFieldType = {\r\n  input: WrappedFieldInputProps;\r\n  meta: WrappedFieldMetaProps;\r\n  placeholder: string;\r\n  type: string;\r\n};\r\n","import React from \"react\";\r\nimport \"./preloader.css\"\r\n\r\nexport default function Preloader() {\r\n  return (\r\n    <div id=\"preloader\">\r\n      <div className=\"lds-hourglass\"></div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { AppStateType } from \"../Store/redux-store\";\r\n\r\ntype PropsType = {\r\n  isAuth: boolean\r\n}\r\nconst mapAuthToProps = (state: AppStateType) => ({ isAuth: state.auth.isAuth });\r\nexport default function withRedirect(Component: React.ComponentType) {\r\n  class RedirectComponent extends React.Component<PropsType> {\r\n    render() {\r\n      if (!this.props.isAuth) return <Redirect to=\"/login\" />;\r\n      return <Component {...this.props} />;\r\n    }\r\n  }\r\n  let AuthRedirect = connect(mapAuthToProps)(RedirectComponent);\r\n  return AuthRedirect;\r\n}\r\n","import { InferActionTypes } from \"./redux-store\";\r\n\r\nlet initialState = {\r\n  dialogs: [\r\n    { id: 1, name: \"Budd\" },\r\n    { id: 2, name: \"Dodic\" },\r\n    { id: 3, name: \"Mr. Flinstone\" },\r\n    { id: 4, name: \"Reptiloid\" },\r\n    { id: 5, name: \"Johny\" },\r\n  ] as Array<DialogType>,\r\n  messages: [\r\n    { id: 1, message: \"Привет))\" },\r\n    { id: 2, message: \"Братан, займи косарь до зп\" },\r\n  ] as Array<MessageType>,\r\n};\r\ntype DialogType = {\r\n  id: number;\r\n  name: string;\r\n};\r\ntype MessageType = {\r\n  id: number;\r\n  message: string;\r\n};\r\nexport type InitStateType = typeof initialState;\r\nconst dialogsReducer = (\r\n  state = initialState,\r\n  action: ActionType\r\n): InitStateType => {\r\n  switch (action.type) {\r\n    case \"SEND_MESSAGE\":\r\n      let newMessage = {\r\n        id: state.messages.length + 1,\r\n        message: action.messageBody,\r\n      };\r\n      if (newMessage.message && newMessage.message.trim()) {\r\n        return { ...state, messages: [...state.messages, newMessage] };\r\n      }\r\n      return state;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\ntype ActionType = InferActionTypes<typeof actions>;\r\n\r\nexport const actions = {\r\n  sendMessage: (messageBody: string) =>\r\n    ({\r\n      type: \"SEND_MESSAGE\",\r\n      messageBody,\r\n    } as const),\r\n};\r\nexport const sendMessage = actions.sendMessage;\r\nexport default dialogsReducer;\r\n","import { getUsers, followUser, unfollowUser } from \"../API/getApi\";\r\nimport { PhotosType } from \"./profileReducer\";\r\nimport { InferActionTypes, BaseThunkType } from \"./redux-store\";\r\n\r\nlet initialState: InitStateType = {\r\n  users: [\r\n    {\r\n      id: 1,\r\n      followed: false,\r\n      name: \"Ilya Voronov\",\r\n      status: \"hey there!\",\r\n      photos: { small: null, large: null },\r\n    }, // массив объектов с сервера\r\n  ],\r\n  currentPage: 1, // номер текущей страницы\r\n  totalCount: 0, // общее число пользователей\r\n  pageSize: 10, // колличество юзеров на одной странице\r\n  isLoading: false, // индикатор лоадера\r\n  followFetch: [], // id юзеров, на которых ушел запрос на подписку\r\n};\r\n\r\nexport type InitStateType = {\r\n  users: Array<UsersType>;\r\n  currentPage: number;\r\n  totalCount: number;\r\n  pageSize: number;\r\n  isLoading: boolean;\r\n  followFetch: Array<number>;\r\n};\r\nexport type UsersType = {\r\n  id: number;\r\n  followed: boolean;\r\n  name: string;\r\n  status: string;\r\n  photos: PhotosType;\r\n};\r\n\r\nconst usersReducer = (\r\n  state = initialState,\r\n  action: ActionTypes\r\n): InitStateType => {\r\n  switch (action.type) {\r\n    case \"FOLLOW\":\r\n      return {\r\n        ...state,\r\n        users: state.users.map((user) => {\r\n          if (user.id === action.userID) {\r\n            return { ...user, followed: true };\r\n          }\r\n          return user;\r\n        }),\r\n      };\r\n\r\n    case \"UNFOLLOW\":\r\n      return {\r\n        ...state,\r\n        users: state.users.map((user) => {\r\n          if (user.id === action.userID) {\r\n            return { ...user, followed: false };\r\n          }\r\n          return user;\r\n        }),\r\n      };\r\n    case \"SET_USERS\":\r\n      return {\r\n        ...state,\r\n        users: action.users,\r\n      };\r\n    case \"SET_CURRENT_PAGE\":\r\n      return {\r\n        ...state,\r\n        currentPage: action.currentPage,\r\n      };\r\n    case \"SET_TOTAL_COUNT\":\r\n      return {\r\n        ...state,\r\n        totalCount: action.totalCount,\r\n      };\r\n    case \"SET_LOADER\":\r\n      return {\r\n        ...state,\r\n        isLoading: action.isLoading,\r\n      };\r\n    case \"DISABLE_BTN\":\r\n      return {\r\n        ...state,\r\n        followFetch: action.isFetching\r\n          ? [...state.followFetch, action.userID]\r\n          : state.followFetch.filter((id) => id !== action.userID),\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\ntype ActionTypes = InferActionTypes<typeof actions>;\r\nexport const actions = {\r\n  follow: (userID: number) => ({ type: \"FOLLOW\", userID } as const),\r\n\r\n  unfollow: (userID: number) => ({ type: \"UNFOLLOW\", userID } as const),\r\n\r\n  setUsers: (users: Array<UsersType>) =>\r\n    ({ type: \"SET_USERS\", users } as const),\r\n\r\n  setCurrentPage: (currentPage: number) =>\r\n    ({ type: \"SET_CURRENT_PAGE\", currentPage } as const),\r\n\r\n  setTotalCount: (totalCount: number) =>\r\n    ({ type: \"SET_TOTAL_COUNT\", totalCount } as const),\r\n\r\n  followedToggle: (isFetching: boolean, userID: number) =>\r\n    ({ type: \"DISABLE_BTN\", isFetching, userID } as const),\r\n\r\n  setLoader: (isLoading: boolean) =>\r\n    ({ type: \"SET_LOADER\", isLoading } as const),\r\n};\r\nexport const setCurrentPage = actions.setCurrentPage;\r\n\r\ntype ThunkType = BaseThunkType<ActionTypes>;\r\nexport const getUsersThunk = (\r\n  currentPage: number,\r\n  pageSize: number\r\n): ThunkType => async (dispatch) => {\r\n  dispatch(actions.setLoader(true));\r\n  let data = await getUsers(currentPage, pageSize);\r\n  dispatch(actions.setUsers(data.items));\r\n  dispatch(actions.setTotalCount(data.totalCount));\r\n  dispatch(actions.setLoader(false));\r\n};\r\nexport const followTrack = (id: number, followed: boolean): ThunkType => async (\r\n  dispatch\r\n) => {\r\n  dispatch(actions.followedToggle(true, id));\r\n  let data = await (followed ? unfollowUser(id) : followUser(id));\r\n  if (data.resultCode === 0) {\r\n    dispatch(followed ? actions.unfollow(id) : actions.follow(id));\r\n  }\r\n  dispatch(actions.followedToggle(false, id));\r\n};\r\n\r\nexport default usersReducer;\r\n"],"sourceRoot":""}