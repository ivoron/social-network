{"version":3,"sources":["Validators/validation.tsx","Components/Content/Login/Login.tsx"],"names":["length","requiredField","value","maxLengthIs20","connect","state","isAuth","auth","captchaUrl","loginThunk","logOutThunk","props","ReduxLoginForm","reduxForm","form","handleSubmit","error","onSubmit","Field","validate","name","component","Input","placeholder","type","src","alt","style","color","marginLeft","marginRight","to","className","email","password","rememberMe","captcha"],"mappings":"mJAK4BA,E,kCALfC,EAAgB,SAACC,GAC5B,OAAKA,EACE,KADY,0B,gCCQjBC,G,ODJwBH,ECII,GDHvB,SAACE,GACN,OAAIA,EAAMF,OAASA,EACX,iBAAN,OAAwBA,EAAxB,cAEK,OCkFII,uBA3BS,SAACC,GACvB,MAAO,CACLC,OAAQD,EAAME,KAAKD,OACnBE,WAAYH,EAAME,KAAKC,cAwBa,CAAEC,eAAYC,iBAAvCN,EAjFmD,SAACO,GAEjE,IAoCMC,EAAiBC,YAAwC,CAC7DC,KAAM,cADeD,EAlCnB,SAAC,GAAyC,IAAvCE,EAAsC,EAAtCA,aAAcC,EAAwB,EAAxBA,MAAOR,EAAiB,EAAjBA,WAC1B,OACE,0BAAMS,SAAUF,GACd,kBAACG,EAAA,EAAD,CACEC,SAAU,CAAClB,EAAeE,GAC1BiB,KAAM,QACNC,UAAWC,IACXC,YAAa,WAEf,kBAACL,EAAA,EAAD,CACEC,SAAU,CAAClB,EAAeE,GAC1BiB,KAAM,WACNC,UAAWC,IACXC,YAAa,WACbC,KAAM,aAEPhB,GACC,kBAACU,EAAA,EAAD,CACEC,SAAU,CAAClB,GACXmB,KAAM,UACNC,UAAWC,IACXC,YAAa,oBAGhBf,GAAc,yBAAKiB,IAAKjB,EAAYkB,IAAI,mBACzC,yBAAKC,MAAO,CAAEC,MAAO,MAAOC,WAAY,IAAMb,GAC9C,2BAAOW,MAAO,CAAEG,YAAa,KAC3B,kBAACZ,EAAA,EAAD,CAAOE,KAAM,aAAcC,UAAW,QAASG,KAAK,aADtD,eAIA,6CAUN,OAAIb,EAAML,OACD,kBAAC,IAAD,CAAUyB,GAAG,aAGpB,yBAAKC,UAAW,aACd,0DACA,kBAACpB,EAAD,CAAgBK,SATH,SAAC,GAA4D,IAA1DgB,EAAyD,EAAzDA,MAAOC,EAAkD,EAAlDA,SAAUC,EAAwC,EAAxCA,WAAYC,EAA4B,EAA5BA,QAC/CzB,EAAMF,WAAWwB,EAAOC,EAAUC,EAAYC,IAQR5B,WAAYG,EAAMH","file":"static/js/5.2e3065a3.chunk.js","sourcesContent":["export const requiredField = (value: string): string | null => {\r\n  if (!value) return \"The field is required!\";\r\n  return null;\r\n};\r\n\r\nexport const maxLengthIs = (length: number) => {\r\n  return (value: string): string | null => {\r\n    if (value.length > length) {\r\n      return `Max length is ${length} symbol(s)`;\r\n    }\r\n    return null;\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport { reduxForm, Field, InjectedFormProps } from \"redux-form\";\r\nimport { requiredField, maxLengthIs } from \"../../../Validators/validation\";\r\nimport { Input } from \"../../../Validators/WarningFieid\";\r\nimport { connect } from \"react-redux\";\r\nimport { loginThunk, logOutThunk } from \"../../../Store/authReducer\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport \"./login.css\";\r\nimport { AppStateType } from \"../../../Store/redux-store\";\r\nlet maxLengthIs20 = maxLengthIs(20);\r\n\r\nconst Login: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n  // форма логинизации + обработка ошибок\r\n  const LoginForm: React.FC<\r\n    InjectedFormProps<FormDataType, LoginPropsType> & LoginPropsType\r\n  > = ({ handleSubmit, error, captchaUrl }) => {\r\n    return (\r\n      <form onSubmit={handleSubmit}>\r\n        <Field\r\n          validate={[requiredField, maxLengthIs20]}\r\n          name={\"email\"}\r\n          component={Input}\r\n          placeholder={\"e-mail\"}\r\n        />\r\n        <Field\r\n          validate={[requiredField, maxLengthIs20]}\r\n          name={\"password\"}\r\n          component={Input}\r\n          placeholder={\"password\"}\r\n          type={\"password\"}\r\n        />\r\n        {captchaUrl && (\r\n          <Field\r\n            validate={[requiredField]}\r\n            name={\"captcha\"}\r\n            component={Input}\r\n            placeholder={\"captcha symbols\"}\r\n          />\r\n        )}\r\n        {captchaUrl && <img src={captchaUrl} alt=\"secure captcha\" />}\r\n        <div style={{ color: \"red\", marginLeft: 5 }}>{error}</div>\r\n        <label style={{ marginRight: 23 }}>\r\n          <Field name={\"rememberMe\"} component={\"input\"} type=\"checkbox\" />\r\n          Remember me\r\n        </label>\r\n        <button>login</button>\r\n      </form>\r\n    );\r\n  };\r\n  const ReduxLoginForm = reduxForm<FormDataType, LoginPropsType>({\r\n    form: \"login-form\",\r\n  })(LoginForm);\r\n  const onSubmit = ({ email, password, rememberMe, captcha }: FormDataType) => {\r\n    props.loginThunk(email, password, rememberMe, captcha);\r\n  };\r\n  if (props.isAuth) {\r\n    return <Redirect to=\"/profile\" />;\r\n  }\r\n  return (\r\n    <div className={\"loginForm\"}>\r\n      <h2>Login or create an account</h2>\r\n      <ReduxLoginForm onSubmit={onSubmit} captchaUrl={props.captchaUrl} />\r\n    </div>\r\n  );\r\n};\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n  return {\r\n    isAuth: state.auth.isAuth,\r\n    captchaUrl: state.auth.captchaUrl,\r\n  };\r\n};\r\ntype LoginPropsType = {\r\n  captchaUrl: string | null;\r\n};\r\ntype FormDataType = {\r\n  email: string;\r\n  password: string;\r\n  rememberMe: boolean;\r\n  captcha: string;\r\n};\r\ntype MapStatePropsType = {\r\n  isAuth: boolean;\r\n  captchaUrl: string | null;\r\n};\r\ntype MapDispatchPropsType = {\r\n  loginThunk: (\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n    captcha: string\r\n  ) => void;\r\n};\r\nexport default connect(mapStateToProps, { loginThunk, logOutThunk })(Login);\r\n"],"sourceRoot":""}