{"version":3,"sources":["assets/images/cat1.jpg","assets/Selectors/user-selectors.ts","Components/Content/Users/User.tsx","Components/Content/Users/Pagination.tsx","Components/Content/Users/Users.tsx","Components/Content/Users/UsersContainer.tsx"],"names":["module","exports","getUsers","state","usersPage","users","User","props","user","path","id","className","to","src","photos","small","pic","alt","name","status","onClick","followTrack","followed","disabled","followFetch","some","Pagination","totalCount","pageSize","changePage","currentPage","pages","pagesCount","Math","ceil","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionNumber","rightPortionNumber","pagination","filter","page","map","key","undefined","Users","userItems","isLoading","Preloader","length","UsersContainer","setCurrentPage","getUsersThunk","this","setCurrentID","React","Component","compose","connect","withRedirect"],"mappings":"2HAAAA,EAAOC,QAAU,IAA0B,kC,2HCK9BC,EAAW,SAACC,GACvB,OAAOA,EAAMC,UAAUC,O,2CCGV,SAASC,EAAKC,GAC3B,IAAQC,EAASD,EAATC,KACFC,EAAO,YAAcD,EAAKE,GAChC,OAEE,yBAAKC,UAAU,YACb,yBAAKA,UAAU,aACb,kBAAC,IAAD,CAASC,GAAIH,GACX,yBAAKI,IAAKL,EAAKM,OAAOC,OAASC,IAAKC,IAAI,eAG5C,yBAAKN,UAAU,YACb,gCAASH,EAAKU,MADhB,IAC+B,6BAD/B,WAEU,2BAAIV,EAAKW,QAAU,YAAnB,KACR,6BACA,4BACA,4BACET,GAAG,YACHU,QAAS,kBAAMb,EAAMc,YAAYb,EAAKE,GAAIF,EAAKc,WAC/CC,SAAUhB,EAAMiB,YAAYC,MAAK,SAACf,GAAD,OAAgBA,IAAOF,EAAKE,OAE5DF,EAAKc,SAAW,WAAa,UAEhC,kD,oBCxBO,SAASI,EAAT,GAQb,IAHa,IAJbC,EAIY,EAJZA,WACAC,EAGY,EAHZA,SACAC,EAEY,EAFZA,WACAC,EACY,EADZA,YAEIC,EAAsB,GACtBC,EAAqBC,KAAKC,KAAKP,EAAaC,GACvCO,EAAI,EAAGA,GAAKH,EAAYG,IAC/BJ,EAAMK,KAAKD,GAEb,IACIE,EAAeJ,KAAKC,KAAKF,EADX,GAElB,EAAwCM,mBAAS,GAAjD,mBAAKC,EAAL,KAAoBC,EAApB,KACIC,EAHc,GAGOF,EAAgB,GAAmB,EACxDG,EAJc,EAIqBH,EAEnCI,EACF,6BACGJ,EAAgB,GACf,4BACE7B,GAAG,UACHU,QAAS,WACPoB,EAAiBD,EAAgB,KAGlC,MAGJR,EACEa,QACC,SAACC,GAAD,OAAUA,GAAQJ,GAAqBI,GAAQH,KAEhDI,KAAI,SAACD,GAAD,OACH,4BACEE,IAAKF,EACLzB,QAAS,WACPS,EAAWgB,IAEbnC,GAAIoB,IAAgBe,EAAO,mBAAgBG,GAE1CH,MAGNR,EAAeE,GACd,4BACE7B,GAAG,UACHU,QAAS,WACPoB,EAAiBD,EAAgB,KAGlC,OAKT,OAAO,yBAAK7B,GAAG,cAAciC,GC/ChB,SAASM,EAAM1C,GAC5B,IAAI2C,EAAY3C,EAAMF,MAAMyC,KAAI,SAACtC,GAAD,OAC9B,kBAACF,EAAD,CACEyC,IAAKvC,EAAKE,GACVF,KAAMA,EACNgB,YAAajB,EAAMiB,YACnBH,YAAad,EAAMc,iBAGjBsB,EACJ,kBAACjB,EAAD,CACEI,YAAavB,EAAMuB,YACnBD,WAAYtB,EAAMsB,WAClBF,WAAYpB,EAAMoB,WAClBC,SAAUrB,EAAMqB,WAIpB,OACE,6BACGe,EACApC,EAAM4C,UAAY,kBAACC,EAAA,EAAD,MAAgBF,GACjC3C,EAAM4C,WAAa5C,EAAMF,MAAMgD,OAAS,GAAKV,G,ICP/CW,E,4MAKJzB,WAAa,SAACgB,GACZ,EAAKtC,MAAMgD,eAAeV,GAC1B,EAAKtC,MAAMiD,cAAcX,EAAM,EAAKtC,MAAMqB,W,uDAN5C,WACE,MAAiD6B,KAAKlD,OACtDiD,EADA,EAAQA,eAAR,EAAuB1B,YAAvB,EAAoCF,Y,oBAOtC,WACE,OACE,kBAACqB,EAAD,CACE5C,MAAOoD,KAAKlD,MAAMF,MAClBwB,WAAY4B,KAAK5B,WACjBD,SAAU6B,KAAKlD,MAAMqB,SACrBD,WAAY8B,KAAKlD,MAAMoB,WACvBG,YAAa2B,KAAKlD,MAAMuB,YACxBqB,UAAWM,KAAKlD,MAAM4C,UACtBO,aAAcD,KAAKlD,MAAMmD,aACzBlC,YAAaiC,KAAKlD,MAAMiB,YACxBH,YAAaoC,KAAKlD,MAAMc,kB,GApBHsC,IAAMC,WAoCpBC,sBACbC,aAZsB,SAAC3D,GACvB,MAAO,CACLE,MAAOH,EAASC,GAChBwB,WAAYxB,EAAMC,UAAUuB,WAC5BC,SAAUzB,EAAMC,UAAUwB,SAC1BE,YAAa3B,EAAMC,UAAU0B,YAC7BqB,UAAWhD,EAAMC,UAAU+C,UAC3B3B,YAAarB,EAAMC,UAAUoB,eAKN,CACvB+B,mBACAG,iBACAF,kBACAnC,kBAEF0C,IAPaF,CAQbP","file":"static/js/3.7303620c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cat1.ab8a0410.jpg\";","import { createSelector } from \"reselect\";\r\nimport {AppStateType} from \"../../Store/redux-store\"\r\n// эксперементально, в этом объеме делать отдельные реселекты нет особого смысла\r\n\r\n\r\nexport const getUsers = (state: AppStateType) => {\r\n  return state.usersPage.users;\r\n};\r\n// export const getUsersSelector = createSelector (getUsers, (users) => {\r\n//     return users\r\n// }) ","import React from \"react\";\r\nimport pic from \"../../../assets/images/cat1.jpg\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n  user: any\r\n  followFetch: Array<number>\r\n  followTrack: (id: number, followed: boolean) => void\r\n}\r\nexport default function User(props: PropsType) {\r\n  const { user } = props;\r\n  const path = \"/profile/\" + user.id;\r\n  return (\r\n    // карточка пользователя\r\n    <div className=\"userItem\">\r\n      <div className=\"userPhoto\">\r\n        <NavLink to={path}>\r\n          <img src={user.photos.small || pic} alt=\"user pic\" />\r\n        </NavLink>\r\n      </div>\r\n      <div className=\"userInfo\">\r\n        <strong>{user.name}</strong> <br />\r\n        Status: <b>{user.status || \"no status\"} </b>\r\n        <br />\r\n        <p />\r\n        <button\r\n          id=\"followBtn\"\r\n          onClick={() => props.followTrack(user.id, user.followed)}\r\n          disabled={props.followFetch.some((id: number) => id === user.id)}\r\n        >\r\n          {user.followed ? \"unfollow\" : \"follow\"}\r\n        </button>\r\n        <button>send message</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\ntype PropsType = {\r\n  totalCount: number;\r\n  pageSize: number;\r\n  changePage: (page: number) => void;\r\n  currentPage: number;\r\n};\r\nexport default function Pagination({\r\n  totalCount,\r\n  pageSize,\r\n  changePage,\r\n  currentPage,\r\n}: PropsType) {\r\n  let pages:Array<number> = [];\r\n  let pagesCount: number = Math.ceil(totalCount / pageSize); //числа страниц = общее число пользователей / размер обной страницы (20 шт)\r\n  for (let i = 1; i <= pagesCount; i++) {\r\n    pages.push(i);\r\n  }\r\n  let portionSize = 9; // отображаемое подряд колличество страниц\r\n  let portionCount = Math.ceil(pagesCount / portionSize);\r\n  let [portionNumber, setPortionNumber] = useState(1);\r\n  let leftPortionNumber = (portionNumber - 1) * portionSize + 1;\r\n  let rightPortionNumber = portionSize * portionNumber;\r\n\r\n  let pagination = (\r\n    <div>\r\n      {portionNumber > 1 && (\r\n        <button\r\n          id=\"skipBTN\"\r\n          onClick={() => {\r\n            setPortionNumber(portionNumber - 1);\r\n          }}\r\n        >\r\n          {\"<<\"}\r\n        </button>\r\n      )}\r\n      {pages\r\n        .filter(\r\n          (page) => page >= leftPortionNumber && page <= rightPortionNumber\r\n        )\r\n        .map((page) => (\r\n          <button\r\n            key={page}\r\n            onClick={() => {\r\n              changePage(page);\r\n            }}\r\n            id={currentPage === page ? \"currentPage\" : undefined}\r\n          >\r\n            {page}\r\n          </button>\r\n        ))}\r\n      {portionCount > portionNumber && (\r\n        <button\r\n          id=\"skipBTN\"\r\n          onClick={() => {\r\n            setPortionNumber(portionNumber + 1);\r\n          }}\r\n        >\r\n          {\">>\"}\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n  return <div id=\"pagination\">{pagination}</div>;\r\n}\r\n","import React from \"react\";\r\nimport User from \"./User\";\r\nimport Preloader from \"../../../assets/Preloader/Preloader\";\r\nimport Pagination from \"./Pagination\";\r\nimport {UsersType} from \"../../../Store/usersReducer\"\r\n\r\ntype PropsType = {\r\n  users: Array<UsersType>\r\n  setCurrentID: (id: number) => void\r\n  followFetch: Array<number>\r\n  followTrack: (id: number, followed: boolean) => void\r\n  currentPage: number\r\n  changePage: (page: number) => void\r\n  totalCount: number \r\n  pageSize: number\r\n  isLoading: boolean\r\n}\r\nexport default function Users(props: PropsType){\r\n  let userItems = props.users.map((user: UsersType) => (\r\n    <User\r\n      key={user.id}\r\n      user={user}\r\n      followFetch={props.followFetch}\r\n      followTrack={props.followTrack}\r\n    />\r\n  ));\r\n  const pagination = (\r\n    <Pagination\r\n      currentPage={props.currentPage}\r\n      changePage={props.changePage}\r\n      totalCount={props.totalCount}\r\n      pageSize={props.pageSize}\r\n    />\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {pagination}\r\n      {props.isLoading ? <Preloader /> : userItems}\r\n      {!props.isLoading && props.users.length > 4 && pagination}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport {\r\n  setCurrentPage,\r\n  getUsersThunk,\r\n  followTrack,\r\n  UsersType,\r\n} from \"../../../Store/usersReducer\";\r\nimport { setCurrentID } from \"../../../Store/profileReducer\";\r\nimport withRedirect from \"../../../HOC/withRedirect\";\r\nimport { compose } from \"redux\";\r\nimport { getUsers } from \"../../../assets/Selectors/user-selectors\";\r\nimport \"./users-page.css\";\r\nimport { AppStateType } from \"../../../Store/redux-store\";\r\nimport { connect } from \"react-redux\";\r\nimport Users from \"./Users\";\r\n\r\ntype DispatchPropsType = {\r\n  getUsersThunk: (currentPage: number, pageSize: number) => void;\r\n  setCurrentPage: (page: number) => void;\r\n  changePage: (page: number) => void;\r\n  setCurrentID: (id: number) => void;\r\n  followTrack: (id: number, followed: boolean) => void;\r\n};\r\ntype StatePropsType = {\r\n  users: Array<UsersType>;\r\n  totalCount: number;\r\n  pageSize: number;\r\n  currentPage: number;\r\n  isLoading: boolean;\r\n  followFetch: Array<number>;\r\n};\r\ntype PropsType = StatePropsType & DispatchPropsType;\r\nclass UsersContainer extends React.Component<PropsType> {\r\n  componentDidMount() {\r\n    const { getUsersThunk, currentPage, pageSize } = this.props;\r\n    getUsersThunk(currentPage, pageSize);\r\n  }\r\n  changePage = (page: number) => {\r\n    this.props.setCurrentPage(page);\r\n    this.props.getUsersThunk(page, this.props.pageSize);\r\n  };\r\n  render() {\r\n    return (\r\n      <Users\r\n        users={this.props.users}\r\n        changePage={this.changePage}\r\n        pageSize={this.props.pageSize}\r\n        totalCount={this.props.totalCount}\r\n        currentPage={this.props.currentPage}\r\n        isLoading={this.props.isLoading}\r\n        setCurrentID={this.props.setCurrentID}\r\n        followFetch={this.props.followFetch}\r\n        followTrack={this.props.followTrack}\r\n      />\r\n    );\r\n  }\r\n}\r\nconst mapStateToprops = (state: AppStateType): StatePropsType => {\r\n  return {\r\n    users: getUsers(state),\r\n    totalCount: state.usersPage.totalCount,\r\n    pageSize: state.usersPage.pageSize,\r\n    currentPage: state.usersPage.currentPage,\r\n    isLoading: state.usersPage.isLoading,\r\n    followFetch: state.usersPage.followFetch,\r\n  };\r\n};\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect(mapStateToprops, {\r\n    setCurrentPage,\r\n    setCurrentID,\r\n    getUsersThunk,\r\n    followTrack,\r\n  }),\r\n  withRedirect\r\n)(UsersContainer);\r\n"],"sourceRoot":""}